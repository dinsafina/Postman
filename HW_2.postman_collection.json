{
	"info": {
		"_postman_id": "4836ec7f-14b0-442c-8c10-a64e611f7a7b",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14234744"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let respi = pm.response.json();",
							"",
							"// Проверить, что name в ответе равно name s request//",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(respi.name).to.eql(\"Irina\");",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request",
							"",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(respi.age).to.eql(\"27\");",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request ",
							"pm.test(\"Check salary\", function(){",
							"    pm.expect(respi.salary).to.eql(60000)",
							"})",
							"",
							"// Спарсить request",
							"let req = request.data",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(respi.name).to.eql(req.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(respi.age).to.eql(req.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check salary\", function(){",
							"    pm.expect(respi.salary).to.eql(+req.salary)",
							"})",
							"",
							"//Вывести в консоль параметр family из response",
							"let resp_family = respi.family;",
							"resp_family.toString();",
							"console.log(resp_family);",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"U_salary_1_5_year in the response is equal salary * 4 from the request\", function(){",
							"    pm.expect(resp_family.u_salary_1_5_year).to.eql(respi.salary*4)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Irina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "60000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let user = pm.response.json();",
							"",
							"// Спарсить request",
							"let req = pm.request.url.query.toObject();",
							"",
							"//Проверить, что name в ответе равно name s request ",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(user.name).to.eql(req.name);",
							"});",
							"",
							"",
							"//Проверить, что age в ответе равно age s request",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(user.age).to.eql(req.age);",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request ",
							"pm.test(\"Check salary\", function() {",
							"    pm.expect(user.salary).to.eql(+req.salary)",
							"});",
							"",
							"// Вывести в консоль параметр family из response",
							"let fam = user.family;",
							"fam.toString();",
							"console.log(fam);",
							"",
							"//Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"The dog parameter has name\", function () {",
							"    pm.expect(fam.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"//Проверить, что у параметра dog есть параметры age",
							"pm.test(\"The dog parameter has age\", function(){",
							"    pm.expect(fam.pets.dog).to.have.property(\"age\")",
							"})",
							"",
							"//Проверить, что параметр name имеет значение Luky",
							"pm.test(\"The name is equal Luky\", function() {",
							"    pm.expect(fam.pets.dog.name).to.eql(\"Luky\")",
							"});",
							"",
							"//Проверить, что параметр age имеет значение 4",
							"pm.expect(\"The age is equal 4\" , function() {",
							"    pm.expect(fam.pets.dog.age).to.eql(4)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kate&age=32&salary=80000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let user = pm.response.json();",
							"",
							"//Спарсить request",
							"var req = pm.request.url.query.toObject();",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(user.name).to.eql(req.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(user.age).to.eql(+req.age);",
							"});",
							"",
							"//Вывести в консоль параметр salary из request.",
							"let sal = user.salary;",
							"sal.toString();",
							"console.log(sal);",
							"",
							"//Вывести в консоль параметр salary из response.",
							"console.log(req.salary)",
							"",
							"//Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(sal[0])",
							"",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(sal[1])",
							"",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(sal[2])",
							"",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"The 0th element of the salary parameter is equal to the salary from request\", function () {",
							"    pm.expect(sal[0]).to.eql(+req.salary);",
							"});",
							"",
							"//проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*2 from request\", function () {",
							"    pm.expect(+sal[1]).to.eql(req.salary *2);",
							"});",
							"",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"The 2st element of the salary parameter is equal to salary*3 from request\", function () {",
							"    pm.expect(+sal[2]).to.eql(req.salary *3);",
							"});",
							"",
							"//Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Olivia\");",
							"",
							"//Передать в окружение переменную age",
							"pm.environment.set(\"age\", 34);",
							"",
							"//Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", 100000)",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for(let i = 0; i < 1; i++) {",
							"  console.log(\"salary: \" +sal)",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let resp = pm.response.json()",
							"",
							"//Спарсить request",
							"let req = request.data;",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"json parameter has the start_qa_salary\", function(){",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"json parameter has the qa_salary_after_6_months\", function(){",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\")",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"json parameter has the qa_salary_after_12_months\", function() {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\")",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"json parameter has the qa_salary_after_1.5_year\", function() {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_year",
							"pm.test(\"json parameter has the qa_salary_after_3.5_years\", function() {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")",
							"});",
							"",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"json response has a 'person' parameter\", function() {",
							"    pm.expect(resp).to.have.property(\"person\")",
							"});",
							"",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)",
							"pm.test(\"start_qa_salary is equal salary from request\", function () {",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)",
							"pm.test(\"qa_salary_after_6_months is equal salary*2 from request\",function () {",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months is equal salary*2.7 from request\",function () {",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year is equal salary*3.3 from request\", function () {",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary* 3.3);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_year is equal salary*3.8 from request\", function () {",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary* 3.8);",
							"});",
							"",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"in the person parameter, the 1st element from u_name equal salary from request\", function () {",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);",
							"});",
							"",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age parameter is equal age from request\", function () {",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);",
							"});",
							"",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years parameter is equal salary*4.2 from request\", function () {",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);",
							"});",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for(let key in resp.person) {",
							"   if(typeof(resp.person[key]) == 'object'){",
							"       for(let i = 0; i < Object.keys(resp.person[key]).length; i++){",
							"           console.log(resp.person[key][i]);",
							"       }",
							"   }",
							"   else if(typeof(resp.person[key]) != 'object') {",
							"        console.log(resp.person[key]);",
							"   }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}