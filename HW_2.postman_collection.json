{
	"info": {
		"_postman_id": "be526f9b-df4e-41bc-8762-1c22c4e3cd34",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14234744"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let resp = pm.response.json();",
							"",
							"//Проверить, что name в ответе равно name s request ",
							"pm.test(\"check name\", function () {",
							"   pm.expect(resp.name).to.eql(\"Linda\")",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request ",
							"pm.test(\"check age\", function () {",
							"   pm.expect(resp.age).to.eql(\"30\")",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request ",
							"pm.test(\"check salary\", function () {",
							"   pm.expect(resp.salary).to.eql(1500)",
							"});",
							"",
							"//Спарсить request",
							"var req = request.data",
							"",
							"//Проверить, что name в ответе равно name s request",
							"pm.test(\"check name request\", function () {",
							"   pm.expect(resp.name).to.eql(req.name)",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request",
							"pm.test(\"check age request\", function () {",
							"   pm.expect(resp.age).to.eql(req.age)",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request",
							"pm.test(\"check salary request\", function () {",
							"   pm.expect(resp.salary).to.eql(+req.salary)",
							"});",
							"",
							"//Вывести в консоль параметр family из response",
							"console.log(resp.family)",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 ",
							"pm.test(\"salary 1_5_year = salary * 4\", function () {",
							"   pm.expect(resp.family.u_salary_1_5_year).to.eql(resp.salary*4)",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Linda",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let resp = pm.response.json()",
							"",
							"// Спарсить request",
							"let req = pm.request.url.query.toObject();",
							"console.log(req)",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"check name\", function () {",
							"   pm.expect(resp.name).to.eql(req.name)",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"check age\", function () {",
							"   pm.expect(resp.age).to.eql(req.age)",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"check salary\", function () {",
							"   pm.expect(resp.salary).to.eql(+req.salary)",
							"});",
							"",
							"//Вывести в консоль параметр family из response",
							"console.log(resp.family)",
							"",
							"//Проверить, что у параметра dog есть параметр name",
							"let dog = resp.family.pets.dog;",
							"",
							"pm.test(\"dog has name\", function () {",
							"    pm.expect(dog).to.have.a.property(\"name\");",
							"});",
							"",
							"//Проверить, что у параметра dog есть параметры age",
							"pm.test(\"dog has age\", function () {",
							"    pm.expect(dog).to.have.a.property(\"age\");",
							"});",
							"",
							"//Проверить, что параметр name имеет значение Luky",
							"pm.test(\"check dog_name\", function () {",
							"   pm.expect(dog.name).to.eql(\"Luky\")",
							"});",
							"",
							"//Проверить, что параметр age имеет значение 4",
							"pm.test(\"check dog_age\", function () {",
							"   pm.expect(dog.age).to.eql(4)",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=John&age=32&salary=1900",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1900"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" //Спарсить response body в json",
							"   let resp = pm.response.json();",
							"  ",
							"//Спарсить request",
							"let req = pm.request.url.query.toObject();",
							"",
							"",
							"//Проверить, что name в ответе равно name s request ",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(resp.name).to.eql(\"Anna\");;",
							"});",
							"",
							"//Проверить, что age в ответе равно age из request",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(resp.age).to.eql(29);;",
							"});",
							"",
							"//Вывести в консоль параметр salary из request",
							"console.log(req.salary)",
							"",
							"//Вывести в консоль параметр salary из response",
							"console.log(resp.salary);",
							"",
							"//Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(resp.salary[0]);",
							"",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(resp.salary[1]);",
							"",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(resp.salary[2]);",
							"",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check salary [0]\", function () {",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);;",
							"});",
							"",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Salary [1] from response = salary *2 from request \", function () {",
							"    pm.expect(+resp.salary[1]).to.eql(+req.salary * 2);;",
							"});",
							"",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Salary [2] from response = salary *3 from request \", function () {",
							"    pm.expect(+resp.salary[2]).to.eql(+req.salary * 3);;",
							"});",
							"",
							"",
							"//Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Anna\");",
							"",
							"// Передать в окружение переменную age",
							"pm.environment.set(\"age\", 29);",
							"",
							"// Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", 1600);",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for(let i =0; i < resp.salary.length; i++) {",
							"   console.log(resp.salary[i])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let resp = pm.response.json();",
							"",
							"// Спарсить request.",
							"let req = request.data;",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Response to.have.property start_qa_salary\", function () {",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Response to.have.property qa_salary_after_6_months\", function () {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Response to.have.property qa_salary_after_12_months\", function () {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Response to.have.property qa_salary_after_1.5_year\", function () {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Response to.have.property qa_salary_after_3.5_years\", function () {",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"Response to.have.property person\", function () {",
							"    pm.expect(resp).to.have.property(\"person\");",
							"});",
							"",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Response to.have.property person\", function () {",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);",
							"});",
							"",
							"console.log(req.salary)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "age",
			"value": "29"
		},
		{
			"key": "salary",
			"value": "1600"
		}
	]
}